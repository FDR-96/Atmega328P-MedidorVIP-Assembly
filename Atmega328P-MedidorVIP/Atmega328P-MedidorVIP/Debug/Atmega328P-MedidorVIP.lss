
AVRASM ver. 2.2.6  C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm Sun Mar 06 14:36:39 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m328pdef.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(7): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\Atmega328P_CFG.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(69): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\ADC.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(74): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\PWM.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(77): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\USART.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(87): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\SPI.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(98): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\Operaciones.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m328pdef.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(7): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\Atmega328P_CFG.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(69): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\ADC.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(74): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\PWM.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(77): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\USART.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(87): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\SPI.inc'
C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\main.asm(98): Including file 'C:\Users\FDR-96\Documents\Github\Atmega328P-MedidorVIP-Assembly\Atmega328P-MedidorVIP\Atmega328P-MedidorVIP\Operaciones.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Atmega328P-MedidorVIP.asm
                                 ;
                                 ; Author : FDPR
                                 
                                 
                                 .INCLUDE "Atmega328P_CFG.inc"
                                 
                                 .def	ValorL = r12					;Subrutina mostrar
                                 .def	ValorH = r13					;Subrutina mostrar
                                 .def	RestoL = r14					;Subrutina division
                                 .def	RestoH = r15					;Subrutina division
                                 .def	DividendoL = r16				;Subrutina division
                                 .def	DividendoH = r17				;Subrutina division
                                 .def	DivisorL = r18				;Subrutina division
                                 .def	DivisorH = r19				;Subrutina division
                                 .def	Contador = r20				;Subrutina division2
                                 .def	rBin2L = r21					;Subrutina descomposicion
                                 .def	rBin2H = r22					;Subrutina descomposicion
                                 
                                 
                                 ;=======================================================================
                                 ; VECTOR DE INTERRUPCION
                                 ;=======================================================================
                                 .equ REINICIO =  0x0000			; Pin externo, reinicio de encendido, reinicio de bajada y reinicio del sistema de vigilancia.
                                 .equ INTERRUPCION_EXTERNA_2 = 0x000A			; Solicitud de interrupci�n de cambio de pin 2
                                 .equ TIMER_COUNTER1_DESBORDAMIENTO = 0x001A	; Timer/Counter1 Overflow
                                 .equ USART_RX  = 0x0024		; USART Rx Completo
                                 
                                 
                                 
                                 ;=======================================================================
                                 ; ASCII ETIQUETAS
                                 ;=======================================================================
                                 .equ ASCII_A = 0x41
                                 .equ ASCII_B = 0x42
                                 .equ ASCII_C = 0x43
                                 .equ ASCII_D = 0x44
                                 .equ ASCII_E = 0x45
                                 .equ ASCII_F = 0x46
                                 .equ ASCII_G = 0x47
                                 .equ ASCII_H = 0x48
                                 .equ ASCII_I = 0x49
                                 .equ ASCII_J = 0x4A
                                 .equ ASCII_K = 0x4B
                                 .equ ASCII_L = 0x4C
                                 .equ ASCII_M = 0x4D
                                 .equ ASCII_N = 0x4E
                                 .equ ASCII_O = 0x4F
                                 .equ ASCII_P = 0x50
                                 .equ ASCII_Q = 0x51
                                 .equ ASCII_R = 0x52
                                 .equ ASCII_S = 0x53
                                 .equ ASCII_T = 0x54
                                 .equ ASCII_U = 0x55
                                 .equ ASCII_V = 0x56
                                 .equ ASCII_W = 0x57
                                 .equ ASCII_X = 0x58
                                 .equ ASCII_Y = 0x59
                                 .equ ASCII_Z = 0x5A
                                 .equ ASCII_ESPACIO = 0x20
                                 .equ ASCII_IGUAL = 0x3D
                                 
                                 ;=======================================================================
                                 ; DEFINICION DE BYTES EN LA MEMORIA DE DATOS SRAM
                                 ;=======================================================================
                                 
                                 .DSEG
                                 
                                 .ORG 0x100
000100                           	TensionADCH: .Byte 1
000101                           	TensionADCL: .Byte 1
000102                           	CorrienteADCH: .Byte 1
000103                           	CorrienteADCL: .Byte 1
000104                           	TensionH: .Byte 1
000105                           	TensionL: .Byte 1
000106                           	PotenciaH: .Byte 1
000107                           	PotenciaL: .Byte 1
000108                           	CorrienteH: .Byte 1
000109                           	CorrienteL: .Byte 1
00010a                           	RestodivL: .Byte 1
00010b                           	RestodivH: .Byte 1
00010c                           	VECTOR: .Byte 5
000111                           	DATO_RX: .Byte 1
000112                           	ResultadoH: .Byte 1
000113                           	ResultadoL: .Byte 1
000114                           	ValA: .Byte 1
000115                           	ValB: .Byte 1
000116                           	ValC: .Byte 1
000117                           	CorrienteH_PWM: .Byte 1
000118                           	CorrienteL_PWM: .Byte 1
000119                           	PotenciaH_PWM: .Byte 1
00011a                           	PotenciaL_PWM: .Byte 1
                                 
                                 
                                 .MACRO	SAVE_SREG					;Guardar en la pila la posicion de memoria
                                 		push r12
                                 		in r12, SREG			
                                 		push r12					;Guardar registros de trabajo
                                 		push r13
                                 		push r14
                                 		push r15
                                 		push r16
                                 		push r17
                                 		push r18
                                 		push r19
                                 		push r20
                                 		push r21
                                 		push r22
                                 		push r23
                                 		push r24
                                 		push r25
                                 		push r26
                                 		push r27
                                 .ENDMACRO
                                 
                                 .MACRO	RETURN_SREG
                                 		pop r27
                                 		pop r26
                                 		pop r25
                                 		pop r24
                                 		pop r23
                                 		pop r22
                                 		pop r21
                                 		pop r20
                                 		pop r19
                                 		pop r18
                                 		pop r17
                                 		pop r16
                                 		pop r15
                                 		pop r14
                                 		pop r13
                                 		pop r12
                                 		out sreg, r12				;Recuperar de la pila la posicion de memoria
                                 		pop r12
                                 .ENDMACRO
                                 
                                 .ORG REINICIO
000000 940c 0428                 	jmp INICIO
                                 
                                 .ORG INTERRUPCION_EXTERNA_2
00000a 940c 04b3                 	jmp RTI_SELECT
                                 	
                                 .ORG TIMER_COUNTER1_DESBORDAMIENTO
00001a 940c 0455                 	jmp RTI_TIMER1_OVF
                                 
                                 .ORG USART_RX
                                 
000024 940c 048a                 	jmp USART_RXC
                                 
                                 .ORG 0x34
000034 9518                      	reti
                                 
                                 	
                                 .INCLUDE "ADC.inc"
                                 
                                  * ADC.inc
                                  *
                                  *   Author: FDPR
                                  */ 
                                 ;=======================================================================
                                 ; Inicializacion del ADC
                                 ;=======================================================================
                                 INIT_ADC:
000035 e003                      		ldi r16, (1<<ADC1D)|(1<<ADC0D)	
000036 9300 007e                 		sts DIDR0, r16				;Descativo entrada digital de los pines ADC0 y ADC1
000038 9508                      		ret
                                 ADC0:
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Configuracion ADEMUX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
000039 e400                      		ldi r16, (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0) 
00003a 9300 007c                 		sts ADMUX, r16				;Referencia de Voltaje Con AVCC y Capacitor, Activar ADC, Canal ADC0  
                                 		
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Iniciar conversion ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
00003c ee0f                      		ldi r16, (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) 
00003d 9300 007a                 		sts ADCSRA, r16				;Prescaler en 8, Habilito ADC, Int de conversion completa(ADIE), Activacion auto del ADC(ADATE)
00003f e006                      		ldi r16, (1<<ADTS2)|(1<<ADTS1)|(0<<ADTS0)	
000040 9300 007b                 		sts ADCSRB, r16				;Timer/Counter1 Overflow
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Leer ADC0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 	LEER_ADC0:
                                 
000042 9100 007a                 		lds r16, ADCSRA				;Cargar el control ADCSRA
000044 fd06                      		SBRC r16, 6					;Saltar si se completo la conversion ADCS = 0
000045 cffc                      		rjmp LEER_ADC0 
                                 			
000046 9110 0078                 		lds r17, ADCL				;Cargar parte baja del ADC
000048 9100 0079                 		lds r16, ADCH				;Cargar parte alta del ADC
00004a 9310 0103                 		sts CorrienteADCL, r17	;Guardar el valor de ADC en VAL_CorrienteADC
00004c 9300 0102                 		sts CorrienteADCH, r16
                                 
00004e e020                      		ldi r18, (0<<ADEN)|(0<<ADSC)|(0<<ADIE)|(0<<ADATE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0) 
00004f 9300 007a                 		sts ADCSRA, r16			;Prescaler en 8, Habilito ADC, Int de conversion completa(ADIE), Activacion auto del ADC(ADATE)  
                                 
000051 9508                      		ret
                                 			
                                 
                                 ADC1:
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Configuracion ADEMUX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
000052 e421                      		ldi r18, (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0) 
000053 9320 007c                 		sts ADMUX, r18				;Referencia de Voltaje Con AVCC y Capacitor, Activar ADC, Canal ADC1    
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Iniciar conversion ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
000055 ee2f                      		ldi r18, (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) 
000056 9320 007a                 		sts ADCSRA, r18				;Prescaler en 8, Habilito ADC, Int de conversion completa(ADIE), Activacion auto del ADC(ADATE)  
000058 e026                      		ldi r18, (1<<ADTS2)|(1<<ADTS1)|(0<<ADTS0)	
000059 9320 007b                 		sts ADCSRB, r18				;Timer/Counter1 Overflow
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Leer ADC1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 	
                                 LEER_ADC1:
                                 
00005b 9120 007a                 		lds r18, ADCSRA				;Cargar el control ADCSRA
00005d fd26                      		sbrc r18, 6					;Saltar si se completo la conversion ADCS = 0
00005e cffc                      		rjmp LEER_ADC1 
                                 			
00005f 9120 0078                 		lds r18, ADCL				;Cargar parte baja del ADC
000061 9130 0079                 		lds r19, ADCH				;Cargar parte alta del ADC
000063 9320 0101                 		sts TensionADCL, r18	;Guardar el valor de ADC en VAL_TensionADC
000065 9330 0100                 		sts TensionADCH, r19
                                 
000067 e020                      		ldi r18, (0<<ADEN)|(0<<ADSC)|(0<<ADIE)|(0<<ADATE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0) 
000068 9320 007a                 		sts ADCSRA, r18				;Prescaler en 8, Habilito ADC, Int de conversion completa(ADIE), Activacion auto del ADC(ADATE)  
                                 
00006a 9508                      		ret	
                                 ;ADC.inc    
                                 ;=======INIT_ADC: Configura el ADC, descativa las entradas digitales de los pines ADC0 y ADC1
                                 ;=======ADC0: Configuracion ADEMUX, Configuracion del Prescaler en 8, Habilitacion del ADC, Int de conversion completa(ADIE), Activacion auto del ADC(ADATE) autoTrigger. TimerCounter1
                                 ;=======LEER_ADC0: Carga la parte baja y alta del ADC y la guarda en la SRAM
                                 .INCLUDE "PWM.inc"
                                 
                                  * PWM.inc
                                  *
                                  *   Author: FDPR
                                  */ 
                                 
                                  INIT_PWM:
00006b ea03                      		ldi r16, (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(1<<WGM10) 
00006c 9300 0080                 		sts TCCR1A, r16				;Modo fase correcta PWM, comparacion igual no invertido, resolucion 10-bit
00006e e00a                      		ldi r16, (1<<WGM12)|(0<<WGM13)|(0<<CS12)|(1<<CS11)|(0<<CS10)  
00006f 9300 0081                 		sts TCCR1B, r16				;Selector de reloj de timer/counter: Clock_I-O/8(from prescaler)
                                 
000071 e001                      		ldi r16, (1<<TOIE1)			;Interrupcion de salida del temporizador/contador  
000072 9300 006f                 		sts TIMSK1, r16
                                 		
000074 e000                      		ldi r16, 0x00
000075 9300 0089                 		sts OCR1AH, r16
000077 9300 0088                 		sts OCR1AL, r16
000079 9300 008b                 		sts OCR1BH, r16
00007b 9300 008a                 		sts OCR1BL, r16
00007d 9508                      ;PWM.inc
                                 ;=======INIT_PWM: Inicializa el PWM en fast mode
                                 .INCLUDE "USART.inc"
                                 
                                  * USART.inc
                                  *
                                  *   Author: FDPR
                                  */ 
                                 
                                 
                                 INIT_USART:
00007e e607                      		ldi r16, 103				;Velocidad de transmicion 9600 Bd
00007f e010                      		ldi r17, 0
000080 9310 00c5                 		sts UBRR0H, r17
000082 9300 00c4                 		sts UBRR0L, r16
                                 
000084 e908                      		ldi r16, (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)	
000085 9300 00c1                 		sts UCSR0B, r16				;Habilita interrupci�n por recepci�n, Habilita recepci�n, Habilita transmici�n
                                 			
000087 e006                      		ldi r16, (0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)	
000088 9300 00c2                 		sts UCSR0C, r16				;Stop Bit 1, 8 bits				
                                 
                                 	
00008a 9508                      		ret
                                 
                                 USART_ESPERA:
                                 
00008b 91a0 00c0                 		lds r26, UCSR0A				;Espera que se limpie la bandera de transmision
00008d ffa5                      		sbrs r26, UDRE0
00008e cffc                      		rjmp USART_ESPERA
00008f 9508                      		ret
                                 
                                 USART_COMPARACION:
                                 		
000090 9100 0111                 		lds r16, DATO_RX			;Cargar dato recibido
000092 e516                      		ldi r17, ASCII_V			;Comparar con V
000093 1301                      		cpse r16, r17
000094 c002                      		rjmp I						;Si es falso, compara con I
000095 940e 012d                 		call MOSTRAR_TENSION		
                                 	I:
000097 e419                      		ldi r17, ASCII_I			;Comparar con I
000098 1301                      		cpse r16, r17
000099 c002                      		rjmp P						;Si es falso, compara con P
00009a 940e 00e5                 		call MOSTRAR_CORRIENTE
                                 	P:
00009c e510                      		ldi r17, ASCII_P				;Comparar con P
00009d 1301                      		cpse r16, r17
00009e 9508                      		ret
00009f 940e 00a2                 		call MOSTRAR_POTENCIA
0000a1 9508                      		ret
                                 MOSTRAR_POTENCIA:
                                 		
0000a2 90d0 0106                 		lds ValorH, PotenciaH		;Cargar valor de potencia alta
0000a4 90c0 0107                 		lds ValorL, PotenciaL		;Cargar valor de potencia baja
                                 		
0000a6 940e 0320                 		call CONVERSION
                                 				
0000a8 940e 008b                 		call USART_ESPERA			
0000aa e540                      		ldi r20, ASCII_P				; P
0000ab 9340 00c6                 		sts UDR0, r20
                                 
0000ad 940e 008b                 		call USART_ESPERA
0000af e240                      		ldi r20, ASCII_ESPACIO				; (espacio)
0000b0 9340 00c6                 		sts UDR0, r20
                                 
0000b2 940e 008b                 		call USART_ESPERA			
0000b4 e34d                      		ldi r20, ASCII_IGUAL				; =
0000b5 9340 00c6                 		sts UDR0, r20
                                 
0000b7 940e 008b                 		call USART_ESPERA
0000b9 e240                      		ldi r20, ASCII_ESPACIO		; (espacio)
0000ba 9340 00c6                 		sts UDR0, r20
                                 
0000bc 940e 0170                 		call MOSTRAR
                                 
0000be 940e 008b                 		call USART_ESPERA
0000c0 e240                      		ldi r20, ASCII_ESPACIO				; (espacio)
0000c1 9340 00c6                 		sts UDR0, r20
                                 
0000c3 940e 008b                 		call USART_ESPERA			
0000c5 e547                      		ldi r20, ASCII_W				; W
0000c6 9340 00c6                 		sts UDR0, r20
                                 
0000c8 940e 008b                 		call USART_ESPERA			
0000ca e441                      		ldi r20, ASCII_A				; a
0000cb 9340 00c6                 		sts UDR0, r20
                                 
0000cd 940e 008b                 		call USART_ESPERA			
0000cf e544                      		ldi r20, ASCII_T				; t
0000d0 9340 00c6                 		sts UDR0, r20
                                 
0000d2 940e 008b                 		call USART_ESPERA			
0000d4 e544                      		ldi r20, ASCII_T				; t
0000d5 9340 00c6                 		sts UDR0, r20
                                 
0000d7 940e 008b                 		call USART_ESPERA			
0000d9 e04a                      		ldi r20, 0x0A				; (salto de linea)
0000da 9340 00c6                 		sts UDR0, r20
                                 
0000dc 940e 008b                 		call USART_ESPERA			
0000de e04d                      		ldi r20, 0x0D				; (retorno de carro)
0000df 9340 00c6                 		sts UDR0, r20
                                 
0000e1 2711                      		clr r17						;Limpiar registro de dato recibido
0000e2 9310 0111                 		sts DATO_RX, r17
                                 	
0000e4 9508                      		ret
                                 
                                 
                                 MOSTRAR_CORRIENTE:
                                 		
0000e5 90d0 0108                 		lds ValorH, CorrienteH		;Cargar valor de corriente alta
0000e7 90c0 0109                 		lds ValorL, CorrienteL		;Cargar valor de corriente baja
                                 		
0000e9 940e 0320                 		call CONVERSION
                                 				
0000eb 940e 008b                 		call USART_ESPERA			
0000ed e449                      		ldi r20, ASCII_I			; I
0000ee 9340 00c6                 		sts UDR0, r20
                                 
0000f0 940e 008b                 		call USART_ESPERA
0000f2 e240                      		ldi r20, ASCII_ESPACIO				; (espacio)
0000f3 9340 00c6                 		sts UDR0, r20
                                 
0000f5 940e 008b                 		call USART_ESPERA			
0000f7 e34d                      		ldi r20, ASCII_IGUAL		; =
0000f8 9340 00c6                 		sts UDR0, r20
                                 
0000fa 940e 008b                 		call USART_ESPERA
0000fc e240                      		ldi r20, ASCII_ESPACIO				; (espacio)
0000fd 9340 00c6                 		sts UDR0, r20
                                 
0000ff 940e 0170                 		call MOSTRAR
                                 
000101 940e 008b                 		call USART_ESPERA
000103 e240                      		ldi r20, ASCII_ESPACIO				; (espacio)
000104 9340 00c6                 		sts UDR0, r20
                                 
000106 940e 008b                 		call USART_ESPERA			
000108 e441                      		ldi r20, ASCII_A	; A
000109 9340 00c6                 		sts UDR0, r20
                                 
00010b 940e 008b                 		call USART_ESPERA			
00010d e44d                      		ldi r20, ASCII_M			; m
00010e 9340 00c6                 		sts UDR0, r20
                                 
000110 940e 008b                 		call USART_ESPERA			
000112 e540                      		ldi r20, ASCII_P				; p
000113 9340 00c6                 		sts UDR0, r20
                                 
000115 940e 008b                 		call USART_ESPERA			
000117 e445                      		ldi r20, ASCII_E		; e
000118 9340 00c6                 		sts UDR0, r20
                                 		
00011a 940e 008b                 		call USART_ESPERA			
00011c e542                      		ldi r20, ASCII_R			; r
00011d 9340 00c6                 		sts UDR0, r20
                                 
00011f 940e 008b                 		call USART_ESPERA			
000121 e04a                      		ldi r20, 0x0A				; (salto de linea)
000122 9340 00c6                 		sts UDR0, r20
                                 
000124 940e 008b                 		call USART_ESPERA			
000126 e04d                      		ldi r20, 0x0D				; (retorno de carro)
000127 9340 00c6                 		sts UDR0, r20
                                 
000129 2711                      		clr r17						;Limpiar registro de dato recibido
00012a 9310 0111                 		sts DATO_RX, r17
                                 	
00012c 9508                      		ret
                                 
                                 
                                 MOSTRAR_TENSION:
                                 
00012d 90d0 0104                 		lds ValorH, TensionH		;Cargar valor de tension alta
00012f 90c0 0105                 		lds ValorL, TensionL		;Cargar valor de tension baja
                                 		
000131 940e 0320                 		call CONVERSION
                                 				
000133 940e 008b                 		call USART_ESPERA			
000135 e546                      		ldi r20, ASCII_V			; V
000136 9340 00c6                 		sts UDR0, r20
                                 
000138 940e 008b                 		call USART_ESPERA
00013a e240                      		ldi r20, ASCII_ESPACIO				; (espacio)
00013b 9340 00c6                 		sts UDR0, r20
                                 
00013d 940e 008b                 		call USART_ESPERA			
00013f e34d                      		ldi r20, ASCII_IGUAL			; =
000140 9340 00c6                 		sts UDR0, r20
                                 
000142 940e 008b                 		call USART_ESPERA
000144 e240                      		ldi r20, ASCII_ESPACIO				; (espacio)
000145 9340 00c6                 		sts UDR0, r20
                                 
000147 940e 0170                 		call MOSTRAR
                                 
000149 940e 008b                 		call USART_ESPERA
00014b e240                      		ldi r20, ASCII_ESPACIO				; (espacio)
00014c 9340 00c6                 		sts UDR0, r20
                                 
00014e 940e 008b                 		call USART_ESPERA			
000150 e546                      		ldi r20, ASCII_V				; V
000151 9340 00c6                 		sts UDR0, r20
                                 
000153 940e 008b                 		call USART_ESPERA			
000155 e44f                      		ldi r20, ASCII_O				; o
000156 9340 00c6                 		sts UDR0, r20
                                 
000158 940e 008b                 		call USART_ESPERA			
00015a e44c                      		ldi r20, ASCII_L			; l
00015b 9340 00c6                 		sts UDR0, r20
                                 
00015d 940e 008b                 		call USART_ESPERA			
00015f e544                      		ldi r20, ASCII_T		; t
000160 9340 00c6                 		sts UDR0, r20
                                 		
000162 940e 008b                 		call USART_ESPERA			
000164 e04a                      		ldi r20, 0x0A				; (salto de linea)
000165 9340 00c6                 		sts UDR0, r20
                                 
000167 940e 008b                 		call USART_ESPERA			
000169 e04d                      		ldi r20, 0x0D				; (retorno de carro)
00016a 9340 00c6                 		sts UDR0, r20
                                 
00016c 2711                      		clr r17						;Limpiar registro de dato recibido
00016d 9310 0111                 		sts DATO_RX, r17
00016f 9508                      		ret
                                 
                                 
                                 MOSTRAR:	
000170 940e 008b                 		call USART_ESPERA
000172 91b1                      		ld	r27, Z+					;Cargamos decena
000173 e3d0                      		ldi r29, 48
000174 0fbd                      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
000175 93b0 00c6                 		sts UDR0,r27				;Enviamos por puerto serie
000177 940e 008b                 		call USART_ESPERA
                                 	
000179 940e 008b                 		call USART_ESPERA
00017b 91b1                      		ld	r27, Z+					;Cargamos unidad
00017c e3d0                      		ldi r29, 48
00017d 0fbd                      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
00017e 93b0 00c6                 		sts UDR0,r27				;Enviamos por puerto serie
000180 940e 008b                 		call USART_ESPERA
                                 
000182 940e 008b                 		call USART_ESPERA			
000184 e24c                      		ldi r20, 0x2C				; ,
000185 9340 00c6                 		sts UDR0, r20				;Enviamos por puerto serie
                                 
000187 940e 008b                 		call USART_ESPERA
000189 91b1                      		ld	r27, Z+					;Cargamos primer decimal
00018a e3d0                      		ldi r29, 48
00018b 0fbd                      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
00018c 93b0 00c6                 		sts UDR0,r27				;Enviamos por puerto serie
00018e 940e 008b                 		call USART_ESPERA
                                 
000190 940e 008b                 		call USART_ESPERA
000192 91b1                      		ld	r27, Z+					;Cargamos segundo decimal
000193 e3d0                      		ldi r29, 48
000194 0fbd                      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
000195 93b0 00c6                 		sts UDR0,r27				;Enviamos por puerto serie
000197 940e 008b                 		call USART_ESPERA
                                 	
000199 940e 008b                 		call USART_ESPERA
00019b 81b0                      		ld	r27, Z					;Cargamos tercer decimal
00019c e3d0                      		ldi r29, 48
00019d 0fbd                      		add r27, r29				;Sumamos 48 para convertirlo en ASCII
00019e 93b0 00c6                 		sts UDR0,r27				;Enviamos por puerto serie
0001a0 940e 008b                 		call USART_ESPERA
                                 
0001a2 9734                      		SBIW ZL, 4					;Poner el puntero en el primer BCD
0001a3 9508                      		ret
                                 ;USART.inc
                                 ;=======INIT_USART: Inicializa el USART con velocidad de trasmision de 9600 baud, habilitamos recepcion y transmicion de datos y la interrepcion por recepcion
                                 ;=======CONFIG_MAX: Inicializar MAX
                                 ;=======USART_ESPERA: Funcion de espera de bandera de transmision
                                 ;=======USART_COMPARACION: Lee la recepcion y compara el caracter recibido 
                                 ;=======MOSTRAR_POTENCIA: Transmite el valor leido por el ADC y posteriormente convertido a un valor ASCII por el USART, luego limpian el REG
                                 ;=======MOSTRAR_CORRIENTE: Transmite el valor leido por el ADC y posteriormente convertido a un valor ASCII por el USART, luego limpian el REG
                                 ;=======MOSTRAR_TENSION: Transmite el valor leido por el ADC y posteriormente convertido a un valor ASCII por el USART, lego limpian el REG
                                 ;=======MOSTRAR: Muestra
                                 .INCLUDE "SPI.inc"
                                 
                                  * SPI.inc
                                  *
                                 
                                  *   Author: FDPR
                                  */ 
                                 
                                  INIT_SPI:
                                  			
0001a4 e20e                      		ldi r16, (1<<DDB1)|(1<<DDB2)|(1<<DDB3)|(1<<DDB5)	
0001a5 b904                      		out DDRB, r16				;Como salida PB1-9(OC1A), PB2-10(OC1B)|| PB5-13(CSK), PB3-11(MOSI)
0001a6 e200                      		ldi r16, (1<<DDC5)			;Pin PC5-A5 (Load) como salida
0001a7 b907                      		out DDRC, r16
0001a8 e511                      		ldi r17,(1<<SPE)|(1<<MSTR)|(1<<SPR0)	;SPR0 determina el preescaler 
                                 							;SPI2X   SPR1   SPR0   PreEscaler
                                 							;  0	   0	  0 	  4
                                 							;  0	   0	  1 	  16
                                 							;  0	   1	  0 	  64
                                 							;etc
                                 							;MSTR establece el modo de funcionamiento, en 0 el spi es esclavo en 1 es maestro
                                 							;Con SPE en 1 activamos el SPI
0001a9 bd1c                      		out SPCR,r17		;Habilitar SPI como Master, Velocidad de reloj f/16 (1Mhz)
                                 			
                                 ;=======================================================================
                                 ; Formato de Registro de Intensidad (Dirección (Hex) = 0xXA)
                                 ;=======================================================================
                                 	
0001aa e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0001ab b918                      		out PORTC, r17
0001ac 0000                      		nop							;Cumplir tcss de hoja de datos MAX
0001ad e01a                      		ldi r17, 0x0A
0001ae bd1e                      		out SPDR, r17				;Entrar Set Brillo MAX
0001af 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001b1 0000                      		nop
0001b2 e010                      		ldi r17, 0x00
0001b3 bd1e                      		out SPDR,r17				;Setear el brillo MAX al Minimo
0001b4 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001b6 0000                      		nop
0001b7 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0001b8 b918                      		out PORTC, r17
0001b9 0000                      		nop
                                 ;=======================================================================
                                 ; Registros en modo decodificación (Dirección (Hex) = 0xX9)
                                 ;=======================================================================
                                 
0001ba e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0001bb b918                      		out PORTC, r17
0001bc 0000                      		nop							;Cumplir tcss de hoja de datos MAX
0001bd e019                      		ldi r17, 0x09
0001be bd1e                      		out SPDR, r17				;Entrar en modo de codificacion
0001bf 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001c1 0000                      		nop
0001c2 e01f                      		ldi r17, 0x0F
0001c3 bd1e                      		out SPDR,r17				;Setear Code B decode for digits 3�0 No decode for digits 7�4
0001c4 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001c6 0000                      		nop
0001c7 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0001c8 b918                      		out PORTC, r17
0001c9 0000                      		nop
                                 
                                 ;=======================================================================
                                 ; Formato de registro de límite de escaneo (Dirección (Hex) = 0xXB)
                                 ;=======================================================================
0001ca e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0001cb b918                      		out PORTC, r17
0001cc 0000                      		nop							;Cumplir tcss de hoja de datos MAX
0001cd e01b                      		ldi r17, 0x0B
0001ce bd1e                      		out SPDR, r17				;Entrar Scan Limit
0001cf 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001d1 0000                      		nop
0001d2 e015                      		ldi r17, 0x05
0001d3 bd1e                      		out SPDR,r17				;Display digits 0 1 2 3 4 5
0001d4 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001d6 0000                      		nop
0001d7 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0001d8 b918                      		out PORTC, r17
0001d9 0000                      		nop
                                 
                                 ;=======================================================================
                                 ; Formato de registro de apagado (Dirección (Hex) = 0xXC)
                                 ;=======================================================================
                                 	
                                 
0001da e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0001db b918                      		out PORTC, r17
0001dc 0000                      		nop							;Cumplir tcss de hoja de datos MAX
0001dd e01c                      		ldi r17, 0x0C
0001de bd1e                      		out SPDR, r17				;Entrar MODO
0001df 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001e1 0000                      		nop
0001e2 e011                      		ldi r17, 1
0001e3 bd1e                      		out SPDR,r17				;Normal Operation
0001e4 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001e6 0000                      		nop
0001e7 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0001e8 b918                      		out PORTC, r17
0001e9 0000                      		nop
                                 ;=======================================================================
                                 ; Formato de registro de prueba de pantalla (Dirección (Hex) = 0xXF)
                                 ;=======================================================================
                                 	
0001ea e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0001eb b918                      		out PORTC, r17
0001ec 0000                      		nop							;Cumplir tcss de hoja de datos MAX
0001ed e01f                      		ldi r17, 0x0F
0001ee bd1e                      		out SPDR, r17				;Entrar TEST
0001ef 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001f1 0000                      		nop
0001f2 e010                      		ldi r17, 0
0001f3 bd1e                      		out SPDR,r17				;Normal Operation
0001f4 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0001f6 0000                      		nop
0001f7 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0001f8 b918                      		out PORTC, r17
0001f9 0000                      		nop
                                 
                                 ;=======================================================================
                                 ; Saludar
                                 ;=======================================================================
0001fa e010                      	    ldi r17, (0<<PC5)			;Mando 0 a PB4 para indicarle a MAX que inicia transferencia de datos
0001fb b918                      		out PORTC, r17
0001fc 0000                      		nop							;Cumplir tcss de hoja de datos MAX
0001fd e011                      		ldi r17, 0x01
0001fe bd1e                      		out SPDR, r17				;Digito 0
0001ff 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000201 0000                      		nop
000202 e010                      		ldi r17, 0x00
000203 bd1e                      		out SPDR,r17				;O
000204 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000206 0000                      		nop
000207 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000208 b918                      		out PORTC, r17
000209 0000                      		nop
                                 
00020a e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00020b b918                      		out PORTC, r17
00020c 0000                      		nop							;Cumplir tcss de hoja de datos MAX
00020d e012                      		ldi r17, 0x02
00020e bd1e                      		out SPDR, r17				;Digito 1
00020f 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000211 0000                      		nop
000212 e01d                      		ldi r17, 0x0D
000213 bd1e                      		out SPDR,r17				;L
000214 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000216 0000                      		nop
000217 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000218 b918                      		out PORTC, r17
000219 0000                      		nop
                                 
00021a e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00021b b918                      		out PORTC, r17
00021c 0000                      		nop							;Cumplir tcss de hoja de datos MAX
00021d e013                      		ldi r17, 0x03
00021e bd1e                      		out SPDR, r17				;Digito 2
00021f 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000221 0000                      		nop
000222 e01d                      		ldi r17, 0x0D
000223 bd1e                      		out SPDR,r17				;L
000224 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000226 0000                      		nop
000227 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000228 b918                      		out PORTC, r17
000229 0000                      		nop
                                 
00022a e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00022b b918                      		out PORTC, r17
00022c 0000                      		nop							;Cumplir tcss de hoja de datos MAX
00022d e014                      		ldi r17, 0x04
00022e bd1e                      		out SPDR, r17				;Digito 3
00022f 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000231 0000                      		nop
000232 e01b                      		ldi r17, 0x0B
000233 bd1e                      		out SPDR,r17				;E
000234 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000236 0000                      		nop
000237 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000238 b918                      		out PORTC, r17
000239 0000                      		nop
                                 
00023a e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00023b b918                      		out PORTC, r17
00023c 0000                      		nop							;Cumplir tcss de hoja de datos MAX
00023d e015                      		ldi r17, 0x05
00023e bd1e                      		out SPDR, r17				;Digito 4
00023f 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000241 0000                      		nop
000242 e317                      		ldi r17, 0x37
000243 bd1e                      		out SPDR,r17				;H
000244 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000246 0000                      		nop
000247 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000248 b918                      		out PORTC, r17
000249 0000                      		nop
                                 
00024a e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00024b b918                      		out PORTC, r17
00024c 0000                      		nop							;Cumplir tcss de hoja de datos MAX
00024d e016                      		ldi r17, 0x06
00024e bd1e                      		out SPDR, r17				;Digito 5
00024f 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000251 0000                      		nop
000252 e010                      		ldi r17, 0x00
000253 bd1e                      		out SPDR,r17				;0
000254 940e 025b                 		call SPI_ESPERA				;Empezar la TX de información
000256 0000                      		nop
000257 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000258 b918                      		out PORTC, r17
000259 0000                      		nop
00025a 9508                      		ret
                                 
                                 ;=======================================================================
                                 ; SPI ESPERA
                                 ; Se establece el indicador SPIF en SPSR, y si la interrupción SPI está habilitada y se establece el bit I en SREG, la rutina de interrupción
                                 ; será ejecutado.
                                 ;=======================================================================
                                 
                                 SPI_ESPERA:	
00025b b5ad                      		in r26, SPSR		
00025c ffa7                      		sbrs r26, SPIF				; Esperar que se complete la transmisi�n
00025d cffd                      		rjmp SPI_ESPERA
00025e 9508                      		ret
                                 
                                 ;=======================================================================
                                 ; SPI MOSTRAR TENSION
                                 ;=======================================================================
                                 
                                 SPI_MOSTRAR_TENSION:
                                 				
00025f e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000260 b918                      		out PORTC, r17
000261 0000                      		nop							;Cumplir tcss de hoja de datos MAX
000262 e016                      		ldi r17, 0x06
000263 bd1e                      		out SPDR, r17				;Digito 5
000264 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
000266 0000                      		nop
000267 e31e                      		ldi r17, 0b0011_1110
000268 bd1e                      		out SPDR,r17				; U
000269 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
00026b 0000                      		nop
00026c e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00026d b918                      		out PORTC, r17
00026e 0000                      		nop
                                 
00026f e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000270 b918                      		out PORTC, r17
000271 0000                      		nop							;Cumplir tcss de hoja de datos MAX
000272 e015                      		ldi r17, 0x05
000273 bd1e                      		out SPDR, r17				;Digito 5
000274 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
000276 0000                      		nop
000277 e019                      		ldi r17, 0b0000_1001
000278 bd1e                      		out SPDR,r17				; =
000279 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
00027b 0000                      		nop
00027c e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00027d b918                      		out PORTC, r17
00027e 0000                      		nop
                                 
00027f 90d0 0104                 		lds ValorH, TensionH		;Cargar valor de tension alta
000281 90c0 0105                 		lds ValorL, TensionL		;Cargar valor de tension baja
000283 940e 0320                 		call CONVERSION
000285 940e 02da                 		call SPI_TRANSMITIR
000287 9508                      		ret
                                 
                                 ;=======================================================================
                                 ; SPI MOSTRAR CORRIENTE
                                 ;=======================================================================
                                 SPI_MOSTRAR_CORRIENTE:
                                 		
000288 e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000289 b918                      		out PORTC, r17
00028a 0000                      		nop							;Cumplir tcss de hoja de datos MAX
00028b e016                      		ldi r17, 0x06
00028c bd1e                      		out SPDR, r17				;Digito 5
00028d 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
00028f 0000                      		nop
000290 e310                      		ldi r17, 0b0011_0000
000291 bd1e                      		out SPDR,r17				; I
000292 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
000294 0000                      		nop
000295 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
000296 b918                      		out PORTC, r17
000297 0000                      		nop
                                 
000298 e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
000299 b918                      		out PORTC, r17
00029a 0000                      		nop							;Cumplir tcss de hoja de datos MAX
00029b e015                      		ldi r17, 0x05
00029c bd1e                      		out SPDR, r17				;Digito 5
00029d 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
00029f 0000                      		nop
0002a0 e019                      		ldi r17, 0b0000_1001
0002a1 bd1e                      		out SPDR,r17				; =
0002a2 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0002a4 0000                      		nop
0002a5 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0002a6 b918                      		out PORTC, r17
0002a7 0000                      		nop
                                 
0002a8 90d0 0108                 		lds ValorH, CorrienteH		;Cargar valor de corriente alta
0002aa 90c0 0109                 		lds ValorL, CorrienteL		;Cargar valor de corriente baja
0002ac 940e 0320                 		call CONVERSION
0002ae 940e 02da                 		call SPI_TRANSMITIR
0002b0 9508                      		ret
                                 		
                                 ;=======================================================================
                                 ; SPI MOSTRAR POTENCIA
                                 ;=======================================================================
                                 	
                                 SPI_MOSTRAR_POTENCIA:
                                 
0002b1 e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0002b2 b918                      		out PORTC, r17
0002b3 0000                      		nop							;Cumplir tcss de hoja de datos MAX
0002b4 e016                      		ldi r17, 0x06
0002b5 bd1e                      		out SPDR, r17				;Digito 5
0002b6 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0002b8 0000                      		nop
0002b9 e617                      		ldi r17, 0b0110_0111
0002ba bd1e                      		out SPDR,r17				; P
0002bb 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0002bd 0000                      		nop
0002be e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0002bf b918                      		out PORTC, r17
0002c0 0000                      		nop
                                 
0002c1 e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0002c2 b918                      		out PORTC, r17
0002c3 0000                      		nop							;Cumplir tcss de hoja de datos MAX
0002c4 e015                      		ldi r17, 0x05
0002c5 bd1e                      		out SPDR, r17				;Digito 5
0002c6 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0002c8 0000                      		nop
0002c9 e019                      		ldi r17, 0b0000_1001
0002ca bd1e                      		out SPDR,r17				; =
0002cb 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0002cd 0000                      		nop
0002ce e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0002cf b918                      		out PORTC, r17
0002d0 0000                      		nop
                                 
0002d1 90d0 0106                 		lds ValorH, PotenciaH		;Cargar valor de potencia alta
0002d3 90c0 0107                 		lds ValorL, PotenciaL		;Cargar valor de potencia baja
0002d5 940e 0320                 		call CONVERSION
0002d7 940e 02da                 		call SPI_TRANSMITIR
0002d9 9508                      		ret
                                 		
                                 ;=======================================================================
                                 ; SPI TRASMITIR VALORES
                                 ;=======================================================================
                                 SPI_TRANSMITIR:
                                 			
                                 	;ENTERO PARTE ALTA
0002da e010                      		ldi r17, (0<<PC5)			;Mando 0 a PB0 para indicarle a MAX que inicia transferencia de datos
0002db b918                      		out PORTC, r17
0002dc 0000                      		nop
0002dd e014                      		ldi r17, 0x04
0002de bd1e                      		out SPDR, r17				;Digito entero alto
0002df 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0002e1 0000                      		nop
                                 
0002e2 9111                      		ld	r17, Z+						
0002e3 bd1e                      		out SPDR, r17				;Envio digito entero alto
0002e4 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0002e6 0000                      		nop
0002e7 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PB0 para indicarle a MAX que finalizo transferencia
0002e8 b918                      		out PORTC, r17
0002e9 0000                      		nop
                                 
                                 	;ENTERO PARTE BAJA
0002ea e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0002eb b918                      		out PORTC, r17
0002ec 0000                      		nop
0002ed e013                      		ldi r17, 0x03
0002ee bd1e                      		out SPDR, r17				;Digito entero bajo
0002ef 940e 025b                 		call SPI_ESPERA 			;Empezar la TX de informaci�n
0002f1 0000                      		nop
                                 	
0002f2 9111                      		ld	r17, Z+						
0002f3 ef00                      		ldi r16, 0xF0
0002f4 0f10                      		add r17, r16				;Suma para mostrar puntto decimal
0002f5 bd1e                      		out SPDR, r17				;Envio digito entero bajo
0002f6 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
0002f8 0000                      		nop
0002f9 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
0002fa b918                      		out PORTC, r17
0002fb 0000                      		nop
                                 
                                 	;PRIMER DECIMAL
0002fc e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
0002fd b918                      		out PORTC, r17
0002fe 0000                      		nop
0002ff e012                      		ldi r17, 0x02
000300 bd1e                      		out SPDR, r17				;Digito primer decimal
000301 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
000303 0000                      		nop
                                 
000304 9111                      		ld	r17, Z+					;Primer decimal
000305 bd1e                      		out SPDR, r17				;Envio primer decimal
000306 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
000308 0000                      		nop
000309 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00030a b918                      		out PORTC, r17
00030b 0000                      		nop
                                 
                                 	;SEGUNDO DECIMAL
00030c e010                      		ldi r17, (0<<PC5)			;Mando 0 a PC5 para indicarle a MAX que inicia transferencia de datos
00030d b918                      		out PORTC, r17
00030e 0000                      		nop
00030f e011                      		ldi r17, 0x1
000310 bd1e                      		out SPDR, r17				;Digito segundo decimal
000311 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
000313 0000                      		nop
                                 
000314 9111                      		ld	r17, Z+					;Segundo decimal
000315 bd1e                      		out SPDR, r17				;Envio segundo decimal
000316 940e 025b                 		call SPI_ESPERA				;Empezar la TX de informaci�n
000318 0000                      		nop
000319 e210                      		ldi r17, (1<<PC5)			;Mando 1 a PC5 para indicarle a MAX que finalizo transferencia
00031a b918                      		out PORTC, r17
00031b 0000                      		nop
                                 		
00031c 8110                      		ld	r17, Z
00031d 9734                      		SBIW ZL, 4
00031e 2711                      		clr r17
                                 
00031f 9508                      		ret
                                 ;SPI.inc
                                 ;=======INIT_SPI: Configuramos el SPI en modo Maestro, con un preescaler de 16 (1Mhz) y lo activamos
                                 ;=======SPI_ESPERA: Esperar que se complete la transmisi�n
                                 ;=======SPI_MOSTRAR_TENSION: Empieza la transmicion por el SPI  
                                 ;=======SPI_MOSTRAR_CORRIENTE: Empieza la transmicion por el SPI 
                                 ;=======SPI_MOSTRAR_POTENCIA: Empieza la transmicion por el SPI 
                                 ;=======SPI_TRANSMITIR: Funcion de espera de bandera de transmision
                                 ;.INCLUDE "PCINT.inc"
                                 ;INT.inc
                                 ;=======INIT_PCINT: Configuramos las interrupciones PCINT 23 - 22 - 21 
                                 .INCLUDE "Operaciones.inc"
                                 
                                  * IncFile1.inc
                                  *
                                  *   Author: FDPR
                                  */ 
                                 
                                 
                                 ;=======================================================================
                                 ; Conversión de Binario a BCD-16 BITS - https://www.youtube.com/watch?v=saId4lt7r48
                                 ;=======================================================================
                                 CONVERSION:
                                 
000320 e0ec                      		ldi	ZL, LOW(VECTOR)
000321 e0f1                      		ldi	ZH, HIGH(VECTOR)			
000322 e277                      		ldi cont, 0x27				;Cargamos 10000
000323 2f67                      		mov rBin2H,cont
000324 e170                      		ldi cont, 0x10
000325 2f57                      		mov rBin2L,cont
000326 d012                      		rcall Bin2ToDigit			;Funcion para calcular digito
000327 e073                      		ldi cont, 0x03				;Cargamos 1000
000328 2f67                      		mov rBin2H,cont
000329 ee78                      		ldi cont, 0xE8
00032a 2f57                      		mov rBin2L,cont
00032b d00d                      		rcall Bin2ToDigit			;Funcion para calcular digito
00032c e070                      		ldi cont, 0x00				;Cargamos 100
00032d 2f67                      		mov rBin2H,cont
00032e e674                      		ldi cont, 0x64
00032f 2f57                      		mov rBin2L,cont
000330 d008                      		rcall Bin2ToDigit			;Funcion para calcular digito
000331 e070                      		ldi cont, 0x00				;Cargamos 10
000332 2f67                      		mov rBin2H,cont
000333 e07a                      		ldi cont, 0x0A
000334 2f57                      		mov rBin2L,cont
000335 d003                      		rcall Bin2ToDigit			;Funcion para calcular digito
000336 82c0                      		st z,ValorL
000337 9734                      		sbiw z,4					;Poner el puntero en el primer BCD
000338 9508                      		ret
                                 	Bin2ToDigit:
000339 2777                      		clr cont						;Conteo en cero
                                 
                                 	Bin2ToDigita:
00033a 16d6                      		cp ValorH,rBin2H			;Comparo nro con comparacion parte alta
00033b f038                      		brcs Bin2ToDigitc			;Si Carry=1 el nro es menor a comparacion, vuelve a rutina para comparar con un valor menor
00033c f411                      		brne Bin2ToDigitb	 
00033d 16c5                      		cp ValorL,rBin2L			;Si es igual, Comparo nro con comparacion parte baja
00033e f020                      		brcs Bin2ToDigitc			;Si Carry=1 nro menor a comparacion
                                 
                                 	Bin2ToDigitb:			
00033f 1ac5                      		sub ValorL,rBin2L			;Resto partes bajas
000340 0ad6                      		sbc ValorH,rBin2H			;Resto partes altas con carry
000341 9573                      		inc cont						;Incremento cuenta para digito BCD
000342 cff7                      		rjmp Bin2ToDigita			;Repito el proceso hasta que sea menor a comparacion
                                 
                                 	Bin2ToDigitc:
000343 9371                      		st z+,cont					;Salva el digito 
000344 9508                      		ret
                                 
                                 ;=======================================================================
                                 ; Calculo de Tension
                                 ;=======================================================================
                                 	
                                 	CALCULO_TENSION:
                                 
000345 9170 0100                 		lds R23, TensionADCH
000347 9160 0101                 		lds R22, TensionADCL	;Carga el numero VAL_Tension en r23:r22
000349 e050                      		ldi R21,0x00
00034a e14d                      		ldi R20,0x1D				;Carga el numero 28 r21:r20
00034b 940e 040f                 		call MULTIPLICACION_16			;Llamado a rutina de multiplicacion de 16 bits x 16 bits
00034d 9310 0104                 		sts TensionH, r17			;Guardamos resultado de la primer multiplicacion
00034f 9300 0105                 		sts TensionL, r16
000351 9508                      		ret
                                 	
                                 ;=======================================================================
                                 ; Calculo de Corriente
                                 ;=======================================================================
                                  
                                 	CALCULO_CORRIENTE:
                                 
000352 9170 0102                 		lds r23, CorrienteADCH	;Carga valores del ADC
000354 9160 0103                 		lds r22, CorrienteADCL
000356 e050                      		ldi R21,0x00
000357 e144                      		ldi R20,0x14				;Carga el numero 20 r21:r20
000358 940e 040f                 		call MULTIPLICACION_16			;Llamado a rutina de multiplicacion de 16 bits x 16 bits
00035a e030                      		ldi DivisorH, 0x00			;Carga 10 en el divisor (para obtener nuestro factor >> 1.929) notacion =  da 20480
00035b e02a                      		ldi DivisorL, 0x0A
00035c 940e 0416                 		call DIVISION_16			;Llama funcion division = 2048 el valor maximo de corriente
00035e 9310 0108                 		sts CorrienteH, r17			;Guardamos resultado de la primer multiplicacion
000360 9300 0109                 		sts CorrienteL, r16
000362 9508                      		ret
                                 
                                 ;=======================================================================
                                 ; Calculo de Potencia
                                 ;=======================================================================
                                  
                                 	CALCULO_POTENCIA:
                                 
000363 9110 0104                 		lds DividendoH, TensionH	;Cargar valor de tension
000365 9100 0105                 		lds DividendoL, TensionL
000367 e033                      		ldi DivisorH, 0x03			;Cargar 1000 en divisor
000368 ee28                      		ldi DivisorL, 0xE8
000369 940e 0416                 		call DIVISION_16			;Llamar funcion division
00036b 9310 0112                 		sts ResultadoH, r17			;Guardar resultado
00036d 9300 0113                 		sts ResultadoL, r16
                                 
00036f 2d1f                      		mov DividendoH, RestoH		;Cargar resto para dividir
000370 2d0e                      		mov DividendoL, RestoL
000371 e030                      		ldi DivisorH, 0x00			;Cargar 100 en divisor
000372 e624                      		ldi DivisorL, 0x64
000373 940e 0416                 		call DIVISION_16			;Llamar funcion division		
000375 9300 0114                 		sts ValA, r16				;Guardar resultado (primer decimal)
                                 
000377 2d1f                      		mov DividendoH, RestoH		;Cargar resto para dividir
000378 2d0e                      		mov DividendoL, RestoL
000379 e030                      		ldi DivisorH, 0x00			;Cargar 10 en divisor
00037a e02a                      		ldi DivisorL, 0x0A
00037b 940e 0416                 		call DIVISION_16			;Llamar funcion division
00037d 9300 0115                 		sts ValB, r16				;Guardar resultado (segundo decimal)
00037f 92e0 0116                 		sts ValC, RestoL			;Guardar resto (tercer decimal)
                                 
000381 9170 0108                 		lds r23, CorrienteH			;Cargar valor de corriente
000383 9160 0109                 		lds r22, CorrienteL
000385 9150 0112                 		lds r21, ResultadoH			;Cargar valor entero de tension
000387 9140 0113                 		lds r20, ResultadoL
000389 940e 040f                 		call MULTIPLICACION_16			;Llamar funcion multiplicacion
00038b 9310 0106                 		sts PotenciaH, r17			;Guardar resultado temporal de la potencia
00038d 9300 0107                 		sts PotenciaL, r16
                                 
00038f 9170 0108                 		lds r23, CorrienteH			;Cargar valor de corriente
000391 9160 0109                 		lds r22, CorrienteL
000393 e050                      		ldi r21, 0x00				;Cargar valor del primer decimal
000394 9140 0114                 		lds r20, ValA
000396 940e 040f                 		call MULTIPLICACION_16			;Llamar funcion multiplicacion
000398 e030                      		ldi DivisorH, 0x00			;Cargar 10 en divisor para acomodar numero
000399 e02a                      		ldi DivisorL, 0x0A
00039a 940e 0416                 		call DIVISION_16			;Llamar funcion division		
00039c 9130 0106                 		lds r19, PotenciaH			;Cargar valor temporal de potencia
00039e 9120 0107                 		lds r18, PotenciaL
0003a0 0f02                      		add r16, r18				;Sumar potencia con resultado de corriente por primer decimal
0003a1 1f13                      		adc r17, r19
0003a2 9310 0106                 		sts PotenciaH, r17			;Guardar resultado temporal de la potencia
0003a4 9300 0107                 		sts PotenciaL, r16
                                 
0003a6 9170 0108                 		lds r23, CorrienteH			;Cargar valor de corriente
0003a8 9160 0109                 		lds r22, CorrienteL
0003aa e050                      		ldi r21, 0x00				;Cargar valor del segundo decimal
0003ab 9140 0115                 		lds r20, ValB
0003ad 940e 040f                 		call MULTIPLICACION_16			;Llamar funcion multiplicacion
0003af e030                      		ldi DivisorH, 0x00			;Cargar 100 en divisor para acomodar numero
0003b0 e624                      		ldi DivisorL, 0x64
0003b1 940e 0416                 		call DIVISION_16			;Llamar funcion division		
0003b3 9130 0106                 		lds r19, PotenciaH			;Cargar valor temporal de potencia
0003b5 9120 0107                 		lds r18, PotenciaL
0003b7 0f02                      		add r16, r18				;Sumar potencia con resultado de corriente por primer decimal
0003b8 1f13                      		adc r17, r19
0003b9 9310 0106                 		sts PotenciaH, r17			;Guardar resultado temporal de la potencia
0003bb 9300 0107                 		sts PotenciaL, r16
                                 
0003bd 9170 0108                 		lds r23, CorrienteH			;Cargar valor de corriente
0003bf 9160 0109                 		lds r22, CorrienteL
0003c1 e050                      		ldi r21, 0x00				;Cargar valor del segundo decimal
0003c2 9140 0116                 		lds r20, ValC
0003c4 940e 040f                 		call MULTIPLICACION_16			;Llamar funcion multiplicacion
0003c6 e033                      		ldi DivisorH, 0x03			;Cargar 1000 en divisor para acomodar numero
0003c7 ee28                      		ldi DivisorL, 0xE8
0003c8 940e 0416                 		call DIVISION_16			;Llamar funcion division		
0003ca 9130 0106                 		lds r19, PotenciaH			;Cargar valor temporal de potencia
0003cc 9120 0107                 		lds r18, PotenciaL
0003ce 0f02                      		add r16, r18				;Sumar potencia con resultado de corriente por primer decimal
0003cf 1f13                      		adc r17, r19
0003d0 9310 0106                 		sts PotenciaH, r17			;Guardar resultado de la potencia
0003d2 9300 0107                 		sts PotenciaL, r16
                                 
0003d4 9508                      		ret
                                 ;=======================================================================
                                 ; Calculo de Corriente PWM
                                 ;=======================================================================
                                  
                                 	CALCULO_CORRIENTE_PWM:	
                                 		
0003d5 9170 0108                 		lds r23, CorrienteH			;Valor corriente 2048 
0003d7 9160 0109                 		lds r22, CorrienteL	
0003d9 e050                      		ldi r21, 0x00				;Multiplicar por 4 = 8192
0003da e044                      		ldi r20, 0x04
0003db 940e 040f                 		call MULTIPLICACION_16
0003dd e030                      		ldi r19, 0x00				;dividir por 10 = 819
0003de e02a                      		ldi r18, 0x0A
0003df 940e 0416                 		call DIVISION_16
0003e1 9310 0117                 		sts CorrienteH_PWM, r17
0003e3 9300 0118                 		sts CorrienteL_PWM, r16
0003e5 e040                      		ldi r20, 0x00
0003e6 ec3c                      		ldi r19, 0xCC				; sumamos 204 para tener 1V a 5V
0003e7 0f03                      		add r16, r19
0003e8 1f14                      		adc r17, r20
0003e9 9310 0117                 		sts CorrienteH_PWM, r17
0003eb 9300 0118                 		sts CorrienteL_PWM, r16
                                 		
0003ed 9508                      		ret
                                 ;=======================================================================
                                 ; Calculo de Potencia PWM 
                                 ;=======================================================================
                                 	CALCULO_POTENCIA_PWM:
                                 
0003ee 9110 0106                 	    lds DividendoH, PotenciaH	;Cargar valor de potencia
0003f0 9100 0107                 		lds DividendoL, PotenciaL		
0003f2 e030                      		ldi DivisorH, 0x00			;Cargar 100 en divisor
0003f3 e624                      		ldi DivisorL, 0x64
0003f4 940e 0416                 		call DIVISION_16
0003f6 9310 0112                 		sts ResultadoH, r17			;Guardar resultado
0003f8 9300 0113                 		sts ResultadoL, r16
                                 		
0003fa 9170 0112                 		lds r23, ResultadoH			;Valor Potencia 600
0003fc 9160 0113                 		lds r22, ResultadoL	
0003fe e050                      		ldi r21, 0x00				;multiplico x14
0003ff e04e                      		ldi r20, 0x0E
000400 940e 040f                 		call MULTIPLICACION_16
                                 	
000402 e030                      		ldi DivisorH, 0x00			;Cargar 10 en divisor, ya se cargo el resultado de la multiplicacion en R16 y R17
000403 e02a                      		ldi DivisorL, 0x0A
000404 940e 0416                 		call DIVISION_16
                                 
000406 e040                      		ldi r20, 0x00
000407 ec3c                      	    ldi r19, 0xCC				; sumamos 204 para tener 1V a 5V
000408 0f03                      		add r16, r19
000409 1f14                      		adc r17, r20
00040a 9310 0119                 		sts PotenciaH_PWM, r17
00040c 9300 011a                 		sts PotenciaL_PWM, r16
                                 		
00040e 9508                      		ret
                                 ;=======================================================================
                                 ; Subrutina Multiplicación 16x16 
                                 ;=======================================================================
                                 	MULTIPLICACION_16:
                                 
00040f 9f64                      		mul	r22, r20				;Multiplica parte baja de A con parte baja de B
000410 0180                      		movw	r17:r16, r1:r0
000411 9f74                      		mul	r23, r20				;Multiplica parte alta de A con parte baja de B
000412 0d10                      		add	r17, r0
000413 9f56                      		mul	r21, r22				;Multiplica parte baja de A con parte alta de B
000414 0d10                      		add	r17, r0
                                 									;Resultado r17, r16
000415 9508                      		ret
                                 ;=======================================================================
                                 ; Subrutina División - https://www.youtube.com/watch?v=3jjfxRP_8ZM
                                 ;=======================================================================
                                 DIVISION_16:
                                 
000416 18ee                      		SUB		RestoL,RestoL		
000417 18ff                      		SUB		RestoH,RestoH	
000418 e141                      		LDI		Contador,0x11		 
000419 c007                      		RJMP	SEGUIR16		 
                                 VOLVER16:
                                 		
00041a 1cee                      		ROL		RestoL		
00041b 1cff                      		ROL		RestoH	
00041c 16e2                      		CP		RestoL,DivisorL		 
00041d 06f3                      		CPC		RestoH,DivisorH		 
00041e f010                      		BRCS	SEGUIR16		
00041f 1ae2                      		SUB		RestoL,DivisorL		 
000420 0af3                      		SBC		RestoH,DivisorH		 
                                 SEGUIR16:
                                 
000421 1f00                      		ROL		DividendoL		 
000422 1f11                      		ROL		DividendoH		 
000423 954a                      		DEC		Contador		 
000424 f7a9                      		BRNE	VOLVER16		 
000425 9500                      		COM		DividendoL		 
000426 9510                      		COM		DividendoH	 
000427 9508                      ;Operaciones.inc
                                 ;=======CONVERSION: Descompone las unidades
                                 ;=======CALCULO_TENSION:  Max 30 Volts
                                 ;=======CALCULO_CORRIENTE: Max 2 Ampers
                                 ;=======CALCULO_POTENCIA: Max 60 Watts
                                 ;=======CALCULO_CORRIENTE_PWM: El ciclo de trabajo ira de 20% a 100% dependiendo de la corriente de entrada.
                                 ;=======CALCULO_POTENCIA_PWM: El ciclo de trabajo ira de 20% a 100% dependiendo de la corriente de entrada.
                                 ;=======MULTIPLICACION_16:
                                 ;=======DIVISION_16:
                                 
                                 INICIO:
                                 
000428 e008                      		ldi r16, high(ramend)		;Configuracion de pila, inicia SP en la direccion mas alta de la memoria RAM
000429 bf0e                      		out sph, r16				
00042a ef0f                      		ldi r16, low(ramend)
00042b bf0d                      		out spl, r16
00042c 94f8                      		cli							;Deshabilitacion global de las interrupciones, pone en cero la bandera I del registro de estado (SREG).
00042d 940e 0035                 		call INIT_ADC				;Llama a la ejecucion de la subrutina en "ADC.inc"
00042f 940e 044a                 		call INIT_PCINT				;Llama a la ejecucion de la subrutina INIT_PCINT	
000431 940e 006b                 		call INIT_PWM				;Llama a la ejecucion de la subrutina en "PWM.inc"	
000433 940e 007e                 		call INIT_USART				;Llama a la ejecucion de la subrutina en "USART.inc"
000435 940e 01a4                 		call INIT_SPI				;Llama a la ejecucion de la subrutina en "SPI.inc"
000437 9478                      		sei							;Habilitacion global de las interrupciones, pone en uno la bandera I del registro de estado (SREG).
                                 
                                 
                                 BUCLE:
000438 940e 0039                 		call ADC0					;Configuracion de ademux e inicio de conversion ADC0 y LEER_ADC0, del archivo "ADC.inc"
00043a 940e 0052                 		call ADC1					;Configuracion de ademux e inicio de conversion ADC1 y LEER_ADC1, del archivo "ADC.inc"
00043c 940e 0345                 		call CALCULO_TENSION		;Llama a la ejecucion de la funcion CALCULO_TENSION del archivo "Operaciones.inc"
00043e 940e 0352                 		call CALCULO_CORRIENTE		;Llama a la ejecucion de la funcion CALCULO_CORRIENTE "Operaciones.inc"
000440 940e 0363                 		call CALCULO_POTENCIA		;Llama a la ejecucion de la funcion CALCULO_POTENCIA "Operaciones.inc"
000442 940e 03d5                 		call CALCULO_CORRIENTE_PWM	;Llama a la ejecucion de la funcion CALCULO_CORRIENTE_PWM "Operaciones.inc"
000444 940e 03ee                 		call CALCULO_POTENCIA_PWM	;Llama a la ejecucion de la funcion CALCULO_POTENCIA_PWM "Operaciones.inc"
000446 940e 0090                 		call USART_COMPARACION		;Llama a la ejecucion de la subrutina del archivo "USART.inc"
000448 940c 0438                 		jmp BUCLE					;Salto a la etiqueta BUCLE, se ejecuta bucle infinito.
                                 
                                 
                                 
                                 ;=======================================================================
                                 ; Inicializacion del PCINT
                                 ;=======================================================================
                                 INIT_PCINT:
00044a e000                      		ldi r16, (0<<DDD7)|(0<<DDD6)|(0<<DDD5)			
00044b b90a                      		out DDRD,r16				;Pines como entrada interrupcion de PCIE2
00044c ee00                      		ldi r16, (1<<PD7)|(1<<PD6)|(1<<PD5)				
00044d b90b                      		out PORTD, r16				;Resistencias Pull Up
00044e e004                      		ldi r16, (1<<PCIE2)			;Habilito int por cambio de pines[7:0] (PCIE2)
00044f 9300 0068                 		sts PCICR, r16
000451 ee00                      		ldi r16, 0b1110_0000		;Habilito los pines 7-6-5 de interrupcion (PCINT 23 - 22 - 21)
000452 9300 006d                 		sts PCMSK2, r16
000454 9518                      		reti
                                 
                                 ;=======================================================================
                                 ; Rutinas de servicio de interrupcion
                                 ;=======================================================================
                                 RTI_TIMER1_OVF:			
000455 92cf
000456 b6cf
000457 92cf
000458 92df
000459 92ef
00045a 92ff
00045b 930f
00045c 931f
00045d 932f
00045e 933f
00045f 934f
000460 935f
000461 936f
000462 937f
000463 938f
000464 939f
000465 93af
000466 93bf                      		SAVE_SREG					;Guardo en la pila la posicion de memoria
                                 								
000467 9150 0119                 		lds r21, PotenciaH_PWM
000469 9350 0089                 		sts OCR1AH, r21				;Salida PWMA timer OC1A
00046b 9150 011a                 		lds r21, PotenciaL_PWM	
00046d 9350 0088                 		sts OCR1AL, r21
                                 			
00046f 9140 0117                 		lds r20, CorrienteH_PWM
000471 9340 008b                 		sts OCR1BH, r20				;Salida PWMB timer OC1B
000473 9140 0118                 		lds r20, CorrienteL_PWM	
000475 9340 008a                 		sts OCR1BL, r20
                                 			
000477 91bf
000478 91af
000479 919f
00047a 918f
00047b 917f
00047c 916f
00047d 915f
00047e 914f
00047f 913f
000480 912f
000481 911f
000482 910f
000483 90ff
000484 90ef
000485 90df
000486 90cf
000487 becf
000488 90cf                      		RETURN_SREG					;Recupero el valor de la pila
000489 9518                      		reti		
                                 
                                 USART_RXC:
                                 
00048a 92cf
00048b b6cf
00048c 92cf
00048d 92df
00048e 92ef
00048f 92ff
000490 930f
000491 931f
000492 932f
000493 933f
000494 934f
000495 935f
000496 936f
000497 937f
000498 938f
000499 939f
00049a 93af
00049b 93bf                      		SAVE_SREG
00049c 9100 00c6                 		lds r16, UDR0
00049e 9300 0111                 		sts DATO_RX, r16
0004a0 91bf
0004a1 91af
0004a2 919f
0004a3 918f
0004a4 917f
0004a5 916f
0004a6 915f
0004a7 914f
0004a8 913f
0004a9 912f
0004aa 911f
0004ab 910f
0004ac 90ff
0004ad 90ef
0004ae 90df
0004af 90cf
0004b0 becf
0004b1 90cf                      		RETURN_SREG
0004b2 9518                      		reti
                                 
                                 RTI_SELECT:							;Tratamiento de interrupcion RTI_SELECT
0004b3 92cf
0004b4 b6cf
0004b5 92cf
0004b6 92df
0004b7 92ef
0004b8 92ff
0004b9 930f
0004ba 931f
0004bb 932f
0004bc 933f
0004bd 934f
0004be 935f
0004bf 936f
0004c0 937f
0004c1 938f
0004c2 939f
0004c3 93af
0004c4 93bf                      		SAVE_SREG					;Se ejecuta MACRO SAVE_SREG, se GUARDA en la pila la posiscion de memoria.
                                 
0004c5 b109                      		in r16, PIND
0004c6 ff07                      		sbrs r16, 7					;Pregunta si PD7 esta en 0
0004c7 940e 02b1                 		call SPI_MOSTRAR_POTENCIA	;Llama funcion para mostrar potencia
0004c9 ff06                      		sbrs r16, 6					;Pregunta si PD6 esta en 0
0004ca 940e 0288                 		call SPI_MOSTRAR_CORRIENTE	;Llama funcion para mostrar corriente 
0004cc ff05                      		sbrs r16, 5					;Pregunta si PD5 esta en 0
0004cd 940e 025f                 		call SPI_MOSTRAR_TENSION	;Llama funcion para mostrar tension
                                 			
0004cf 91bf
0004d0 91af
0004d1 919f
0004d2 918f
0004d3 917f
0004d4 916f
0004d5 915f
0004d6 914f
0004d7 913f
0004d8 912f
0004d9 911f
0004da 910f
0004db 90ff
0004dc 90ef
0004dd 90df
0004de 90cf
0004df becf
0004e0 90cf                      		RETURN_SREG                ;Se ejecuta MACRO RECOVER_SREG, se RECUPERA de la pila la posiscion de memoria.


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :  13 r0 :   3 r1 :   1 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:  27 
r13:  14 r14:  14 r15:  13 r16:  89 r17: 220 r18:  37 r19:  30 r20:  96 
r21:  25 r22:  22 r23:  34 r24:   6 r25:   6 r26:  10 r27:  21 r28:   0 
r29:  10 r30:   3 r31:   1 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   5 add   :  13 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   3 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 136 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   5 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   3 cpc   :   1 
cpi   :   0 cpse  :   3 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   1 jmp   :   5 
ld    :  10 ldd   :   0 ldi   : 196 lds   :  56 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  12 movw  :   1 mul   :   3 muls  :   0 mulsu :   0 
neg   :   0 nop   :  84 or    :   0 ori   :   0 out   :  94 pop   :  51 
push  :  51 rcall :   4 ret   :  27 reti  :   5 rjmp  :   8 rol   :   4 
ror   :   0 sbc   :   2 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   3 sbr   :   0 sbrc  :   2 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :  99 
sub   :   4 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 38 out of 113 (33.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009c4   2412      0   2412   32768   7.4%
[.dseg] 0x000100 0x00011b      0     27     27    2048   1.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
